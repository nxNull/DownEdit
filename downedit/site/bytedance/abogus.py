import time
import random

import urllib.parse

from downedit.service.fingerprint import Fingerprint
from downedit.service.serialization import format_mm_version
from downedit.service.user_agents import UserAgent
from downedit.site.bytedance.encrypt import Hash, Crypto

__all__ = ["ABogus"]

class ABogus:
    def __init__(self, fp: str = "", user_agent: str = ""):
        self.aid = 6383
        self.pageId = 0
        self.salt = "cus"
        self.array1 = []
        self.array2 = []
        self.array3 = []
        self.options = [0, 1, 14]

        self.character_list = [
            "Dkdpgh2ZmsQB80/MfvV36XI1R45-WUAlEixNLwoqYTOPuzKFjJnry79HbGcaStCe",
            "ckdp1h4ZKsUB80/Mfvw36XIgR25+WQAlEi7NLboqYTOPuzmFjJnryx9HVGDaStCe",
            "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
            "Dkdpgh4ZKsQB80/Mfvw36XI1R25+WUAlEi7NLboqYTOPuzmFjJnryx9HVGcaStCe=",
            "Dkdpgh4ZKsQB80/Mfvw36XI1R25-WUAlEi7NLboqYTOPuzmFjJnryx9HVGcaStCe=",
        ]

        self.crypto = Crypto(
            self.salt, self.character_list
        )

        self.user_agent = (
            user_agent
            if user_agent is not None and user_agent != ""
            else "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36"
        )

        self.browser_fingerprint = (
            fp
            if fp is not None and fp != ""
            else Fingerprint.browser_fingerprint("Edge")
        )

        self.sort_index = [
            18, 20, 52, 26, 30, 34, 58, 38, 40, 53, 42, 21, 27, 54, 55, 31, 35, 57, 39, 41, 43, 22, 28,
            32, 60, 36, 23, 29, 33, 37, 44, 45, 59, 46, 47, 48, 49, 50, 24, 25, 65, 66, 70, 71
        ]
        self.sort_index_2 = [
            18, 20, 26, 30, 34, 38, 40, 42, 21, 27, 31, 35, 39, 41, 43, 22, 28, 32, 36, 23, 29, 33, 37,
            44, 45, 46, 47, 48, 49, 50, 24, 25, 52, 53, 54, 55, 57, 58, 59, 60, 65, 66, 70, 71
        ]

    def encode_data(self, data: str, alphabet_index: int = 0) -> str:
        """
        Encode the data using the specified Base64 alphabet.

        Args:
            data (str): Input data.
            alphabet_index (int): Custom alphabet index.

        Returns:
            str: Encoded data.
        """
        return self.crypto.abogus_encode(data, alphabet_index)

    def generate_abogus(self, params: str, request: str = "") -> tuple:
        """
        Generate the ABogus parameter.

        Args:
            params (str): Request parameters.
            request (str): Request method, empty if unclear.

        Returns:
            tuple: ABogus parameter generated by params and ua.
        """
        ab_dir = {
            8: 3,
            15: {
                "aid": self.aid,
                "pageId": self.pageId,
                "boe": False,
                "ddrt": 7,
                "paths": {
                    "include": [{} for _ in range(7)],
                    "exclude": [],
                },
                "track": {"mode": 0, "delay": 300, "paths": []},
                "dump": True,
                "rpU": "",
            },
            18: 44,
            19: [1, 0, 1, 5],
            66: 0,
            69: 0,
            70: 0,
            71: 0,
        }

        start_encryption = int(time.time() * 1000)

        array1 = self.crypto.params_to_array(
            self.crypto.params_to_array(params)
        )
        array2 = self.crypto.params_to_array(
            self.crypto.params_to_array(request)
        )
        array3 = [
            212, 61, 87, 195, 104, 163, 124, 28, 92, 126, 187,
            53, 218, 38, 254, 253, 252, 73, 83, 197, 194, 142,
            113, 37, 9, 67, 166, 36, 56, 72, 56, 64,
        ]
        end_encryption = int(time.time() * 1000)

        ab_dir[20] = (start_encryption >> 24) & 255
        ab_dir[21] = (start_encryption >> 16) & 255
        ab_dir[22] = (start_encryption >> 8) & 255
        ab_dir[23] = start_encryption & 255
        ab_dir[24] = int(start_encryption / 256 / 256 / 256 / 256) >> 0
        ab_dir[25] = int(start_encryption / 256 / 256 / 256 / 256 / 256) >> 0
        ab_dir[26] = (self.options[0] >> 24) & 255
        ab_dir[27] = (self.options[0] >> 16) & 255
        ab_dir[28] = (self.options[0] >> 8) & 255
        ab_dir[29] = self.options[0] & 255
        ab_dir[30] = int(self.options[1] / 256) & 255
        ab_dir[31] = (self.options[1] % 256) & 255
        ab_dir[32] = (self.options[1] >> 24) & 255
        ab_dir[33] = (self.options[1] >> 16) & 255
        ab_dir[34] = (self.options[2] >> 24) & 255
        ab_dir[35] = (self.options[2] >> 16) & 255
        ab_dir[36] = (self.options[2] >> 8) & 255
        ab_dir[37] = self.options[2] & 255
        ab_dir[38] = array1[21]
        ab_dir[39] = array1[22]
        ab_dir[40] = array2[21]
        ab_dir[41] = array2[22]
        ab_dir[42] = array3[23]
        ab_dir[43] = array3[24]
        ab_dir[44] = (end_encryption >> 24) & 255
        ab_dir[45] = (end_encryption >> 16) & 255
        ab_dir[46] = (end_encryption >> 8) & 255
        ab_dir[47] = end_encryption & 255
        ab_dir[48] = ab_dir[8]
        ab_dir[49] = int(end_encryption / 256 / 256 / 256 / 256) >> 0
        ab_dir[50] = int(end_encryption / 256 / 256 / 256 / 256 / 256) >> 0

        ab_dir[51] = (self.pageId >> 24) & 255
        ab_dir[52] = (self.pageId >> 16) & 255
        ab_dir[53] = (self.pageId >> 8) & 255
        ab_dir[54] = self.pageId & 255
        ab_dir[55] = self.pageId
        ab_dir[56] = self.aid
        ab_dir[57] = self.aid & 255
        ab_dir[58] = (self.aid >> 8) & 255
        ab_dir[59] = (self.aid >> 16) & 255
        ab_dir[60] = (self.aid >> 24) & 255

        ab_dir[64] = len(self.browser_fingerprint)
        ab_dir[65] = len(self.browser_fingerprint)

        sorted_values = [ab_dir.get(i, 0) for i in self.sort_index]
        edge_fp_array = Hash.to_char_array(self.browser_fingerprint)

        ab_xor = (len(self.browser_fingerprint) & 255) >> 8 & 255

        for index in range(len(self.sort_index_2) - 1):
            if index == 0:
                ab_xor = ab_dir.get(self.sort_index_2[index], 0)
            ab_xor ^= ab_dir.get(self.sort_index_2[index + 1], 0)

        sorted_values.extend(edge_fp_array)
        sorted_values.append(ab_xor)

        abogus_bytes_str = (
            Hash.generate_random_bytes()
            + self.crypto.transform_bytes(sorted_values)
        )

        abogus = self.crypto.abogus_encode(abogus_bytes_str, 0)
        params = "%s&a_bogus=%s" % (params, abogus)
        return (params, abogus, self.user_agent)


if __name__ == "__main__":
    url = "https://www.douyin.com/aweme/v1/web/aweme/detail/?"

    platform_type, device_type, browser_type = "Desktop", "Windows", "Chrome"
    user_agent = UserAgent(platform_type=platform_type, device_type=device_type, browser_type=browser_type)
    browser_info = Fingerprint.browser_fingerprint(browser_type=browser_type, user_agent=user_agent)
    fingerprint = (
        f"{browser_info.get("width")}|{browser_info.get("height")}|{browser_info.get("outerWidth")}|{browser_info.get("outerHeight")}|"
        f"{browser_info.get("availLeft")}|{browser_info.get("availTop")}|0|0|{browser_info.get("availWidth")}|{browser_info.get("availHeight")}|"
        f"{browser_info.get("availTop")}|{browser_info.get("availWidth")}|{browser_info.get("width")}|{browser_info.get("height")}|24|24|{browser_info.get("platform")}"
    )

    param_dict = {}
    param_dict["device_platform"] = "webapp"
    param_dict["aid"] = 6383
    param_dict["channel"] = "channel_pc_web"
    param_dict["aweme_id"] = "7380308675841297704"
    param_dict["update_version_code"] = 170400
    param_dict["pc_client_type"] = 1
    param_dict["version_code"] = 190500
    param_dict["version_name"] = "19.5.0"
    param_dict["cookie_enabled"] = True
    param_dict["screen_width"] = browser_info.get("width")
    param_dict["screen_height"] = browser_info.get("height")
    param_dict["browser_language"] = "zh-CN"
    param_dict["browser_platform"] = browser_info.get("platform")
    param_dict["browser_name"] = browser_type
    param_dict["browser_version"] = format_mm_version(user_agent.browser_version)
    param_dict["browser_online"] = True
    param_dict["engine_name"] = "Blink"
    param_dict["engine_version"] = format_mm_version(user_agent.browser_version)
    param_dict["os_name"] = device_type
    param_dict["os_version"] = "10"
    param_dict["cpu_core_num"] = browser_info.get("hardwareConcurrency")
    param_dict["device_memory"] = browser_info.get("deviceMemory")
    param_dict["platform"] = "PC"
    param_dict["downlink"] = 10
    param_dict["effective_type"] = "4g"
    param_dict["round_trip_time"] = 50
    param_dict["webid"] = "737629434979239682"

    params = urllib.parse.urlencode(param_dict)
    request = "GET"

    abogus = ABogus(user_agent=user_agent, fp=fingerprint)
    print(abogus.generate_abogus(params=params, request=request))